on: push

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: "Build & Test (${{matrix.os}})"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: System info
        run: |
          rustc -vV
          rustup -vV
          cargo -vV
          npm --version
          node --version
      
      - name: Pull submodule
        run: npm run submodule

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ${{ env.APPDATA }}/npm-cache # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
     
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: deltachat-core-rust/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies & build
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --verbose
 
      - name: Test
        run: npm run test

  build-and-upload-prebuilds:
    needs: build-and-test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    name: "Build & Upload Prebuilds (${{matrix.os}})"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Prebuild Filename (Windows)
        id: prebuild-filename-windows
        if: matrix.os == windows-latest
        run: |
          Set-Variable -Name "tag" -Value ("${{ github.ref }}").replace("refs/tags/", "")        
          echo "::set-env name=PREBUILD_ARCHIVE_NAME::$tag-windows-x64.tar.gz"

      - name: Prebuild Filename (Linux)
        id: prebuild-filename-linux
        if: matrix.os == ubuntu-latest
        run: |
          export tag=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          echo "::set-env name=PREBUILD_ARCHIVE_NAME::$tag-linux-x64.tar.gz"

      - name: Prebuild Filename (MacOS)
        id: prebuild-filename-macos
        if: matrix.os == macos-latest
        run: |
          export tag=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          echo "::set-env name=PREBUILD_ARCHIVE_NAME::$tag-darwin-x64.tar.gz"

      - name: Build Prebuild
        run: |
          echo ${{ env.PREBUILD_ARCHIVE_NAME }}
          npm run prebuildify
          tar -zcvf "${{ env.PREBUILD_ARCHIVE_NAME }}" -C prebuilds .

      - name: Upload Prebuild
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.PREBUILD_ARCHIVE_NAME }}
          asset_name: ${{ env.PREBUILD_ARCHIVE_NAME }}
          tag: ${{ github.ref }}
          overwrite: true
